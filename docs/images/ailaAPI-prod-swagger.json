{
  "swagger": "2.0",
  "info": {
    "description": "This API intended to deploy on aws API Gateway",
    "version": "1.0.0",
    "title": "AI Learning Assistant API"
  },
  "basePath": "/prod",
  "schemes": ["https"],
  "paths": {
    "/admin/courseInstructors": {
      "get": {
        "operationId": "admin_get_course_instructors_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "examples": {
              "application/json": [
                {
                  "user_email": "instructor@example.com",
                  "first_name": "John",
                  "last_name": "Doe"
                },
                {
                  "user_email": "instructor2@example.com",
                  "first_name": "Jane",
                  "last_name": "Smith"
                }
              ]
            }
          },
          "400": {
            "description": "400 response",
            "examples": {
              "application/json": {
                "error": "course_id is required"
              }
            }
          },
          "500": {
            "description": "500 response",
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },

    "/admin/courses": {
      "get": {
        "operationId": "admin_get_courses_GET",
        "responses": {
          "200": {
            "description": "200 response",
            "examples": {
              "application/json": [
                {
                  "course_id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
                  "course_name": "Introduction to Computer Science",
                  "course_department": "CS",
                  "course_number": "101",
                  "course_access_code": "CS1012024",
                  "course_student_access": true
                },
                {
                  "course_id": "2b3c4d5e-6f7g-8h9i-0j1k-l2m3n4o5p6q",
                  "course_name": "Data Structures",
                  "course_department": "CS",
                  "course_number": "201",
                  "course_access_code": "CS2012024",
                  "course_student_access": true
                }
              ]
            }
          },
          "500": {
            "description": "500 response",
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/create_course": {
      "post": {
        "operationId": "admin_create_course_POST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "course_department",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_number",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_access_code",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_student_access",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "MODEL547ffe",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/delete_course": {
      "delete": {
        "operationId": "admin_delete_course_DELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/delete_course_instructor_enrolments": {
      "delete": {
        "operationId": "admin_delete_course_instructor_enrolments_DELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/delete_instructor_enrolments": {
      "delete": {
        "operationId": "admin_delete_instructor_enrolments_DELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/elevate_instructor": {
      "post": {
        "operationId": "admin_elevate_instructor_POST",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "examples": {
              "application/json": {
                "message": "No changes made. User is already an instructor or admin."
              }
            }
          },
          "201": {
            "description": "201 response",
            "examples": {
              "application/json": {
                "message": "New user created and elevated to instructor."
              }
            }
          },
          "400": {
            "description": "400 response",
            "examples": {
              "application/json": {
                "error": "Email is required"
              }
            }
          },
          "500": {
            "description": "500 response",
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/enroll_instructor": {
      "post": {
        "operationId": "admin_enroll_instructor_POST",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "course_id": {
                  "type": "string",
                  "description": "The ID of the course to enroll the instructor in."
                },
                "instructor_email": {
                  "type": "string",
                  "description": "The email of the instructor to enroll."
                }
              },
              "required": ["course_id", "instructor_email"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instructor enrolled and modules created successfully.",
            "examples": {
              "application/json": {
                "message": "Instructor enrolled and modules created successfully."
              }
            }
          },
          "400": {
            "description": "400 response",
            "examples": {
              "application/json": {
                "error": "Instructor email not found"
              }
            }
          },
          "500": {
            "description": "500 response",
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/instructorCourses": {
      "get": {
        "operationId": "admin_get_instructor_courses_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Email of the instructor to fetch their courses."
          }
        ],
        "responses": {
          "200": {
            "description": "List of courses for the specified instructor.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "course_id": {
                    "type": "string",
                    "description": "Unique identifier for the course."
                  },
                  "course_name": {
                    "type": "string",
                    "description": "Name of the course."
                  },
                  "course_department": {
                    "type": "string",
                    "description": "Department of the course."
                  },
                  "course_number": {
                    "type": "string",
                    "description": "Course number."
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "course_id": "course-1",
                  "course_name": "Introduction to Computer Science",
                  "course_department": "CS",
                  "course_number": "101"
                },
                {
                  "course_id": "course-2",
                  "course_name": "Data Structures",
                  "course_department": "CS",
                  "course_number": "201"
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if instructor_email is not provided.",
            "examples": {
              "application/json": {
                "error": "instructor_email is required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong.",
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/instructors": {
      "get": {
        "operationId": "admin_get_instructors_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Email of the instructor to filter the results."
          }
        ],
        "responses": {
          "200": {
            "description": "List of instructors retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "user_email": {
                    "type": "string",
                    "description": "Email of the instructor."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name of the instructor."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the instructor."
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "user_email": "instructor1@example.com",
                  "first_name": "John",
                  "last_name": "Doe"
                },
                {
                  "user_email": "instructor2@example.com",
                  "first_name": "Jane",
                  "last_name": "Smith"
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if instructor_email is not provided.",
            "examples": {
              "application/json": {
                "error": "instructor_email is required"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions.",
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong.",
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "examples": {
              "application/json": {
                "error": "Too many requests"
              }
            }
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/lower_instructor": {
      "post": {
        "operationId": "admin_lower_instructor_POST",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Email of the user to lower from instructor to student."
          }
        ],
        "responses": {
          "200": {
            "description": "User role updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message indicating the user role update."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "User role updated to student for instructor@example.com and all instructor enrolments deleted."
              }
            }
          },
          "400": {
            "description": "Bad request if the email parameter is missing or the user is not an instructor.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the issue."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User is not an instructor or doesn't exist"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/admin/updateCourseAccess": {
      "post": {
        "operationId": "admin_update_course_access_POST",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "access",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Boolean string to set course access; use 'true' or 'false'."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course whose access is being updated."
          }
        ],
        "responses": {
          "200": {
            "description": "Course access updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message indicating course access was updated."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "Course access updated successfully."
              }
            }
          },
          "400": {
            "description": "Bad request if course_id or access parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the issue."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id and access query parameters are required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "adminAuthorizer": []
          }
        ]
      }
    },
    "/instructor/analytics": {
      "get": {
        "operationId": "instructor_get_analytics_GET",
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course for which analytics data is being requested."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved analytics data for the specified course.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "module_id": {
                    "type": "string",
                    "description": "The ID of the module."
                  },
                  "module_name": {
                    "type": "string",
                    "description": "The name of the module."
                  },
                  "concept_number": {
                    "type": "integer",
                    "description": "The number associated with the concept."
                  },
                  "module_number": {
                    "type": "integer",
                    "description": "The number associated with the module."
                  },
                  "message_count": {
                    "type": "integer",
                    "description": "The count of messages associated with the module."
                  },
                  "access_count": {
                    "type": "integer",
                    "description": "The count of times the module has been accessed."
                  },
                  "average_score": {
                    "type": "number",
                    "format": "float",
                    "description": "The average score of students for the module."
                  },
                  "perfect_score_percentage": {
                    "type": "number",
                    "format": "float",
                    "description": "The percentage of students who achieved a perfect score."
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "module_id": "abc123",
                  "module_name": "Introduction to Programming",
                  "concept_number": 1,
                  "module_number": 1,
                  "message_count": 10,
                  "access_count": 50,
                  "average_score": 85.5,
                  "perfect_score_percentage": 20.0
                },
                {
                  "module_id": "def456",
                  "module_name": "Data Structures",
                  "concept_number": 2,
                  "module_number": 2,
                  "message_count": 5,
                  "access_count": 30,
                  "average_score": 90.0,
                  "perfect_score_percentage": 30.0
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if course_id parameter is missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the missing course_id."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id is required"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/courses": {
      "get": {
        "operationId": "instructor_get_courses_GET",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the instructor whose courses are being requested."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved courses for the specified instructor.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "course_id": {
                    "type": "string",
                    "description": "The ID of the course."
                  },
                  "course_name": {
                    "type": "string",
                    "description": "The name of the course."
                  },
                  "course_description": {
                    "type": "string",
                    "description": "A brief description of the course."
                  },
                  "course_start_date": {
                    "type": "string",
                    "format": "date",
                    "description": "The start date of the course."
                  },
                  "course_end_date": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date of the course."
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "course_id": "c123",
                  "course_name": "Introduction to Computer Science",
                  "course_description": "An introductory course on computer science principles.",
                  "course_start_date": "2024-01-15",
                  "course_end_date": "2024-05-15"
                },
                {
                  "course_id": "c456",
                  "course_name": "Advanced Algorithms",
                  "course_description": "A course focused on advanced algorithmic techniques.",
                  "course_start_date": "2024-02-01",
                  "course_end_date": "2024-06-01"
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if the email parameter is missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the missing email."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "email is required"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/create_concept": {
      "post": {
        "operationId": "instructor_create_concept_POST",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "concept_number",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The number associated with the concept being created."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course to which the concept belongs."
          },
          {
            "in": "body",
            "name": "concept",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "concept_name": {
                  "type": "string",
                  "description": "The name of the concept being created."
                }
              },
              "required": ["concept_name"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a new concept.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Confirmation message of successful creation."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "Concept created successfully"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "concept_name is required"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/create_module": {
      "post": {
        "operationId": "instructor_create_module_POST",
        "parameters": [
          {
            "name": "concept_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the concept to which the module belongs."
          },
          {
            "name": "module_number",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The number associated with the module being created."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course in which the module will be created."
          },
          {
            "name": "module_name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The name of the module being created."
          },
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the instructor creating the module."
          }
        ],
        "responses": {
          "201": {
            "description": "Module created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "module_id": {
                  "type": "string",
                  "description": "The ID of the newly created module."
                },
                "concept_id": {
                  "type": "string",
                  "description": "The ID of the concept associated with the module."
                },
                "module_name": {
                  "type": "string",
                  "description": "The name of the newly created module."
                },
                "module_number": {
                  "type": "string",
                  "description": "The number of the newly created module."
                }
              }
            },
            "examples": {
              "application/json": {
                "module_id": "uuid-of-module",
                "concept_id": "uuid-of-concept",
                "module_name": "New Module Name",
                "module_number": "1"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id, concept_id, module_name, module_number, or instructor_email is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/delete_concept": {
      "delete": {
        "operationId": "instructor_delete_concept_DELETE",
        "parameters": [
          {
            "name": "concept_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/delete_file": {
      "delete": {
        "operationId": "instructor_delete_file_DELETE",
        "parameters": [
          {
            "name": "file_name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_type",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/delete_module": {
      "delete": {
        "operationId": "instructor_delete_module_DELETE",
        "parameters": [
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/delete_module_s3": {
      "delete": {
        "operationId": "instructor_delete_module_s3_DELETE",
        "parameters": [
          {
            "name": "module_name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/delete_student": {
      "delete": {
        "operationId": "instructor_delete_student_DELETE",
        "parameters": [
          {
            "name": "user_email",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "404": {
            "description": "404 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/edit_concept": {
      "put": {
        "operationId": "instructor_edit_concept_PUT",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "concept_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the concept to be edited."
          },
          {
            "name": "concept_number",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The updated number for the concept."
          },
          {
            "in": "body",
            "name": "MODELa97a46",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "concept_name": {
                  "type": "string",
                  "description": "The updated name for the concept."
                }
              },
              "required": ["concept_name"]
            },
            "description": "The updated concept name in the request body."
          }
        ],
        "responses": {
          "200": {
            "description": "Concept updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "concept_id": {
                  "type": "string",
                  "description": "The ID of the concept."
                },
                "concept_name": {
                  "type": "string",
                  "description": "The updated name of the concept."
                },
                "concept_number": {
                  "type": "string",
                  "description": "The updated number of the concept."
                }
              }
            },
            "examples": {
              "application/json": {
                "concept_id": "uuid-of-concept",
                "concept_name": "Updated Concept Name",
                "concept_number": "2"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters or body data are missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "concept_id and concept_number are required"
              }
            }
          },
          "404": {
            "description": "Concept not found if the provided concept ID does not exist.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the concept was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Concept not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/edit_module": {
      "put": {
        "operationId": "instructor_edit_module_PUT",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "concept_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the concept associated with the module."
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the module to be edited."
          },
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the instructor making the edit."
          },
          {
            "in": "body",
            "name": "MODEL456247",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "module_name": {
                  "type": "string",
                  "description": "The updated name for the module."
                }
              },
              "required": ["module_name"]
            },
            "description": "The updated module name in the request body."
          }
        ],
        "responses": {
          "200": {
            "description": "Module updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Confirmation message indicating the module was updated."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "Module updated successfully"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters or body data are missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "module_name is required in the body"
              }
            }
          },
          "404": {
            "description": "Not found if the provided module ID does not exist.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the module was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Module not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/generate_access_code": {
      "put": {
        "operationId": "instructor_generate_access_code_PUT",
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course for which to generate a new access code."
          }
        ],
        "responses": {
          "200": {
            "description": "Access code generated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Confirmation message indicating the access code was generated."
                },
                "access_code": {
                  "type": "string",
                  "description": "The newly generated access code."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "Access code generated successfully",
                "access_code": "NEWCODE123"
              }
            }
          },
          "400": {
            "description": "Bad request if course_id is missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id is required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/generate_presigned_url": {
      "get": {
        "operationId": "instructor_generate_presigned_url_GET_2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file_name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_type",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/get_access_code": {
      "get": {
        "operationId": "instructor_get_access_code_GET",
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course for which to retrieve the access code."
          }
        ],
        "responses": {
          "200": {
            "description": "Access code retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "course_access_code": {
                  "type": "string",
                  "description": "The access code for the specified course."
                }
              }
            },
            "examples": {
              "application/json": {
                "course_access_code": "ABC123"
              }
            }
          },
          "400": {
            "description": "Bad request if course_id is missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id is required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/get_all_files": {
      "get": {
        "operationId": "instructor_get_all_files_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "module_name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/get_prompt": {
      "get": {
        "operationId": "instructor_get_prompt_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course for which to retrieve the system prompt."
          }
        ],
        "responses": {
          "200": {
            "description": "System prompt retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "system_prompt": {
                  "type": "string",
                  "description": "The system prompt associated with the specified course."
                }
              }
            },
            "examples": {
              "application/json": {
                "system_prompt": "This is the system prompt for the course."
              }
            }
          },
          "400": {
            "description": "Bad request if course_id is missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id is missing"
              }
            }
          },
          "404": {
            "description": "Not Found if the specified course does not exist.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the course was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Course not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized access if the user does not have instructor privileges.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating unauthorized access."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if the rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating rate limit exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests, please try again later."
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/previous_prompts": {
      "get": {
        "operationId": "instructor_get_previous_prompts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the instructor requesting the previous prompts."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course for which to retrieve previous prompts."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved previous prompts.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the prompt was created."
                  },
                  "previous_prompt": {
                    "type": "string",
                    "description": "The engagement details of the previous prompt."
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "timestamp": "2024-09-26T12:00:00Z",
                  "previous_prompt": "What are the learning objectives for this course?"
                },
                {
                  "timestamp": "2024-09-25T10:30:00Z",
                  "previous_prompt": "Please provide additional resources for the assignment."
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if course_id or instructor_email is missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id or instructor_email query parameter is required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/prompt": {
      "put": {
        "operationId": "instructor_update_prompt_PUT",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the instructor updating the prompt."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course for which to update the prompt."
          },
          {
            "in": "body",
            "name": "prompt",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "description": "The new system prompt to be set for the course."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the prompt.",
            "schema": {
              "type": "object",
              "properties": {
                "course_id": {
                  "type": "string",
                  "description": "The ID of the updated course."
                },
                "system_prompt": {
                  "type": "string",
                  "description": "The updated system prompt."
                }
              }
            },
            "examples": {
              "application/json": {
                "course_id": "course123",
                "system_prompt": "New system prompt for the course."
              }
            }
          },
          "400": {
            "description": "Bad request if course_id, instructor_email, or request body is missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id, instructor_email, or request body is missing"
              }
            }
          },
          "404": {
            "description": "Not found if the course does not exist.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the course was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Course not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the instructor is not authenticated.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that authorization failed."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if rate limits are exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating too many requests."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests"
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/reorder_module": {
      "put": {
        "operationId": "instructor_reorder_module_PUT",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the module to be reordered."
          },
          {
            "name": "module_number",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The new module number for the specified module."
          },
          {
            "name": "instructor_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the instructor making the update."
          },
          {
            "in": "body",
            "name": "module_name",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "module_name": {
                  "type": "string",
                  "description": "The new name for the module."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the module.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Confirmation message indicating the module was updated."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "Module updated successfully"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "module_name is required in the body"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the instructor is not authenticated.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that authorization failed."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if rate limits are exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating too many requests."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests"
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/student_course": {
      "get": {
        "operationId": "instructor_generate_presigned_url_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the student whose courses are being retrieved."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the student's courses.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "course_id": {
                    "type": "string",
                    "description": "The unique identifier for the course."
                  },
                  "course_name": {
                    "type": "string",
                    "description": "The name of the course."
                  },
                  "course_department": {
                    "type": "string",
                    "description": "The department offering the course."
                  },
                  "course_number": {
                    "type": "integer",
                    "description": "The course number."
                  },
                  "course_access_code": {
                    "type": "string",
                    "description": "The access code for the course."
                  },
                  "course_student_access": {
                    "type": "boolean",
                    "description": "Indicates if the course is accessible to students."
                  },
                  "system_prompt": {
                    "type": "string",
                    "description": "The system prompt associated with the course."
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "course_id": "12345",
                  "course_name": "Introduction to Programming",
                  "course_department": "Computer Science",
                  "course_number": 101,
                  "course_access_code": "ABC123",
                  "course_student_access": true,
                  "system_prompt": "This is an introductory course."
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if the email parameter is missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Invalid value"
              }
            }
          },
          "404": {
            "description": "Not found if the user with the provided email does not exist.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the user was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the instructor is not authenticated.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that authorization failed."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if rate limits are exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating too many requests."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests"
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/update_metadata": {
      "put": {
        "operationId": "instructor_update_metadata_PUT",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the module."
          },
          {
            "name": "filename",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The name of the file to update."
          },
          {
            "name": "filetype",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The type of the file."
          },
          {
            "in": "body",
            "name": "metadata",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "type": "string",
                  "description": "The metadata associated with the file."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File metadata updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "The unique identifier for the file."
                },
                "module_id": {
                  "type": "string",
                  "description": "The module ID to which the file is associated."
                },
                "filename": {
                  "type": "string",
                  "description": "The name of the updated file."
                },
                "filetype": {
                  "type": "string",
                  "description": "The type of the file."
                },
                "metadata": {
                  "type": "string",
                  "description": "The updated metadata for the file."
                },
                "time_uploaded": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The timestamp when the file was uploaded."
                }
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "module_id and filename are required"
              }
            }
          },
          "404": {
            "description": "Not found if no file matches the provided criteria.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the file was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "File not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/view_concepts": {
      "get": {
        "operationId": "instructor_view_concepts_GET",
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the course to retrieve concepts from."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of concepts for the specified course.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "concept_id": {
                    "type": "string",
                    "description": "The unique identifier for the concept."
                  },
                  "concept_name": {
                    "type": "string",
                    "description": "The name of the concept."
                  },
                  "concept_number": {
                    "type": "integer",
                    "description": "The number of the concept in the course."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id is required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/view_modules": {
      "get": {
        "operationId": "instructor_view_modules_GET",
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the course to retrieve modules from."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of modules for the specified course.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "module_id": {
                    "type": "string",
                    "description": "The unique identifier for the module."
                  },
                  "module_name": {
                    "type": "string",
                    "description": "The name of the module."
                  },
                  "module_number": {
                    "type": "integer",
                    "description": "The number of the module in the course."
                  },
                  "concept_name": {
                    "type": "string",
                    "description": "The name of the concept associated with the module."
                  },
                  "concept_number": {
                    "type": "integer",
                    "description": "The number of the concept in the course."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id is required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/view_student_messages": {
      "get": {
        "operationId": "instructor_view_student_messages_GET",
        "parameters": [
          {
            "name": "student_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the student whose messages are to be retrieved."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the course to retrieve messages for."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of messages for the specified student in the course.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "message_content": {
                    "type": "string",
                    "description": "The content of the message."
                  },
                  "time_sent": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the message was sent."
                  },
                  "student_sent": {
                    "type": "boolean",
                    "description": "Indicates if the message was sent by the student."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "student_email and course_id are required"
              }
            }
          },
          "404": {
            "description": "User not found if the provided student email does not match any records.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the user was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/instructor/view_students": {
      "get": {
        "operationId": "instructor_view_students_GET",
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the course to retrieve enrolled students."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of students enrolled in the specified course.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "user_email": {
                    "type": "string",
                    "description": "The email address of the student."
                  },
                  "username": {
                    "type": "string",
                    "description": "The username of the student."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "The first name of the student."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The last name of the student."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "course_id is required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "instructorAuthorizer": []
          }
        ]
      }
    },
    "/student/course": {
      "get": {
        "operationId": "student_get_courses_GET",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email address of the student to retrieve their enrolled courses."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of courses for the specified student.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Course"
              }
            },
            "examples": {
              "application/json": [
                {
                  "course_id": "course-123",
                  "course_name": "Introduction to Computer Science",
                  "course_student_access": true
                },
                {
                  "course_id": "course-456",
                  "course_name": "Calculus I",
                  "course_student_access": true
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if the email parameter is missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Invalid value"
              }
            }
          },
          "404": {
            "description": "User not found if the provided email does not correspond to any user.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the user was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/course_page": {
      "get": {
        "operationId": "student_get_course_page_GET",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email address of the student whose course page is being retrieved."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course for which the page is being retrieved."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the course page data for the specified student.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CourseModuleData"
              }
            },
            "examples": {
              "application/json": [
                {
                  "concept_id": "concept-001",
                  "concept_name": "Introduction to Programming",
                  "module_id": "module-001",
                  "module_name": "Getting Started",
                  "module_number": 1,
                  "student_module_id": "student-module-001",
                  "module_score": 85,
                  "last_accessed": "2024-09-26T10:30:00Z",
                  "module_context_embedding": [0.5, 0.2, 0.8]
                },
                {
                  "concept_id": "concept-001",
                  "concept_name": "Introduction to Programming",
                  "module_id": "module-002",
                  "module_name": "Control Structures",
                  "module_number": 2,
                  "student_module_id": "student-module-002",
                  "module_score": null,
                  "last_accessed": null,
                  "module_context_embedding": [0.1, 0.3, 0.7]
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if the email or course_id parameter is missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Invalid value"
              }
            }
          },
          "404": {
            "description": "User not found if the provided email does not correspond to any user.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the user was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/create_ai_message": {
      "post": {
        "operationId": "student_create_ai_message_POST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email address of the student sending the AI message."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course related to the AI message."
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the module related to the AI message."
          },
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The session ID for the current interaction."
          },
          {
            "in": "body",
            "name": "message",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message_content": {
                  "type": "string",
                  "description": "The content of the AI message to be created."
                }
              },
              "required": ["message_content"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created AI message.",
            "schema": {
              "$ref": "#/definitions/MessageData"
            },
            "examples": {
              "application/json": {
                "message_id": "message-001",
                "session_id": "session-001",
                "student_sent": false,
                "message_content": "This is a sample AI message.",
                "time_sent": "2024-09-26T10:30:00Z"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "session_id and message_content are required"
              }
            }
          },
          "404": {
            "description": "User or enrolment not found if the provided email does not correspond to any user.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the user or enrolment was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/create_message": {
      "post": {
        "operationId": "student_create_message_POST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email address of the student sending the message."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course related to the message."
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the module related to the message."
          },
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The session ID for the current interaction."
          },
          {
            "in": "body",
            "name": "message",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message_content": {
                  "type": "string",
                  "description": "The content of the message to be created."
                }
              },
              "required": ["message_content"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created message.",
            "schema": {
              "$ref": "#/definitions/MessageData"
            },
            "examples": {
              "application/json": {
                "message_id": "message-002",
                "session_id": "session-002",
                "student_sent": true,
                "message_content": "This is a sample message.",
                "time_sent": "2024-09-26T10:30:00Z"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "session_id and message_content are required"
              }
            }
          },
          "404": {
            "description": "User or enrolment not found if the provided email does not correspond to any user.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the user or enrolment was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/create_session": {
      "post": {
        "operationId": "student_create_session_POST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "session_name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The name of the session to be created."
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email address of the student creating the session."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course associated with the session."
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the module associated with the session."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created session.",
            "schema": {
              "$ref": "#/definitions/SessionData"
            },
            "examples": {
              "application/json": {
                "session_id": "session-001",
                "student_module_id": "student-module-001",
                "session_name": "Introduction to Programming",
                "session_context_embeddings": [],
                "last_accessed": "2024-09-26T10:30:00Z"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Invalid value"
              }
            }
          },
          "404": {
            "description": "User or student module not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the user or student module was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Student not found."
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/create_user": {
      "post": {
        "operationId": "student_create_user_POST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The username of the user."
          },
          {
            "name": "preferred_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The preferred name of the user."
          },
          {
            "name": "user_email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The email address of the user."
          },
          {
            "name": "first_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The first name of the user."
          },
          {
            "name": "last_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The last name of the user."
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully created or updated.",
            "schema": {
              "$ref": "#/definitions/UserData"
            },
            "examples": {
              "application/json": {
                "user_email": "example@mail.com",
                "username": "student123",
                "first_name": "John",
                "last_name": "Doe",
                "preferred_name": "Johnny",
                "time_account_created": "2024-09-26T10:30:00Z",
                "roles": ["student"],
                "last_sign_in": "2024-09-26T10:30:00Z"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User data is required"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user does not have the required permissions."
          },
          "429": {
            "description": "Too many requests if the request limit has been exceeded."
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/delete_last_message": {
      "delete": {
        "operationId": "student_delete_last_conversation_DELETE",
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/delete_session": {
      "delete": {
        "operationId": "student_delete_session_DELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/enroll_student": {
      "post": {
        "operationId": "admin_enroll_student_POST",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "course_access_code",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The access code for the course to enroll the student."
          },
          {
            "name": "student_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email address of the student to be enrolled."
          }
        ],
        "responses": {
          "201": {
            "description": "Student enrolled successfully and modules created.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Confirmation message about successful enrollment."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "Student enrolled and modules created successfully."
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating the reason for the bad request."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "student_email and course_access_code query parameters are required"
              }
            }
          },
          "404": {
            "description": "Not Found if the student or course access code is invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the student or course was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Student not found."
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong during the operation.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/get_messages": {
      "get": {
        "operationId": "get_messages_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the session for which messages are being retrieved."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved messages for the specified session.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "message_id": {
                    "type": "string",
                    "description": "Unique identifier for the message."
                  },
                  "session_id": {
                    "type": "string",
                    "description": "ID of the session associated with the message."
                  },
                  "student_sent": {
                    "type": "boolean",
                    "description": "Indicates whether the message was sent by the student."
                  },
                  "message_content": {
                    "type": "string",
                    "description": "Content of the message."
                  },
                  "time_sent": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when the message was sent."
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "message_id": "1",
                  "session_id": "abc123",
                  "student_sent": true,
                  "message_content": "Hello, how can I help?",
                  "time_sent": "2024-09-26T10:00:00Z"
                },
                {
                  "message_id": "2",
                  "session_id": "abc123",
                  "student_sent": false,
                  "message_content": "Please provide more details.",
                  "time_sent": "2024-09-26T10:01:00Z"
                }
              ]
            }
          },
          "400": {
            "description": "Bad request if session_id is not provided.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that session_id is required."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "session_id is required"
              }
            }
          },
          "404": {
            "description": "No messages found for the given session.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Message indicating that no messages were found."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "No messages found for this session."
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/get_name": {
      "get": {
        "operationId": "student_get_name_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the user whose name is being retrieved."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's first name.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The first name of the user."
                }
              }
            },
            "examples": {
              "application/json": {
                "name": "John"
              }
            }
          },
          "400": {
            "description": "Bad request if user_email is not provided.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that user_email is required."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User email is required"
              }
            }
          },
          "404": {
            "description": "User not found for the provided email.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Message indicating that the user was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Message indicating that authentication is required."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Message indicating that the rate limit has been exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests"
              }
            }
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/get_user_roles": {
      "get": {
        "operationId": "student_get_user_roles_GET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the user whose roles are being retrieved."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's roles.",
            "schema": {
              "type": "object",
              "properties": {
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of roles assigned to the user."
                }
              }
            },
            "examples": {
              "application/json": {
                "roles": ["student", "instructor"]
              }
            }
          },
          "400": {
            "description": "Bad request if user_email is not provided.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that user_email is required."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User email is required"
              }
            }
          },
          "404": {
            "description": "User not found for the provided email.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Message indicating that the user was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Message indicating that authentication is required."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Unauthorized access"
              }
            }
          },
          "429": {
            "description": "Too many requests if rate limit is exceeded.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Message indicating that the rate limit has been exceeded."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Too many requests"
              }
            }
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/module": {
      "get": {
        "operationId": "student_get_module_sessions_GET",
        "parameters": [
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/text_generation": {
      "post": {
        "operationId": "student_text_generation_POST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "session_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "MODELaf067b",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 response"
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          },
          "401": {
            "description": "401 response"
          },
          "429": {
            "description": "429 response"
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/update_module_score": {
      "post": {
        "operationId": "student_update_module_score_POST",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "course_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the course associated with the module."
          },
          {
            "name": "llm_verdict",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The LLM verdict indicating whether the student should receive a score of 100 (true) or 0 (false)."
          },
          {
            "name": "student_email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The email of the student whose module score is being updated."
          },
          {
            "name": "module_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the module for which the score is being updated."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the module score.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Success message indicating that the module score was updated."
                }
              }
            },
            "examples": {
              "application/json": {
                "message": "Module score updated successfully."
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that query parameters are invalid."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Invalid query parameters."
              }
            }
          },
          "404": {
            "description": "User or student module not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Message indicating that the user or module was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "User not found."
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    },
    "/student/update_session_name": {
      "put": {
        "operationId": "student_update_session_name_PUT",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the session to update."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "session_name": {
                  "type": "string",
                  "description": "The new name for the session."
                }
              }
            },
            "description": "The new session name to be set."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the session name.",
            "schema": {
              "type": "object",
              "properties": {
                "session_id": {
                  "type": "string",
                  "description": "The ID of the updated session."
                },
                "session_name": {
                  "type": "string",
                  "description": "The new name of the updated session."
                }
              }
            },
            "examples": {
              "application/json": {
                "session_id": "12345",
                "session_name": "New Session Name"
              }
            }
          },
          "400": {
            "description": "Bad request if required parameters are missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating that the value is invalid."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Invalid value"
              }
            }
          },
          "404": {
            "description": "Session not found.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Message indicating that the session was not found."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Session not found"
              }
            }
          },
          "500": {
            "description": "Internal server error if something goes wrong.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Error message indicating an internal server error."
                }
              }
            },
            "examples": {
              "application/json": {
                "error": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "studentAuthorizer": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "instructorAuthorizer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-amazon-apigateway-authtype": "custom"
    },
    "adminAuthorizer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-amazon-apigateway-authtype": "custom"
    },
    "studentAuthorizer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-amazon-apigateway-authtype": "custom"
    }
  },
  "definitions": {}
}
